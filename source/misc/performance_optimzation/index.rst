性能优化
========

分析系统瓶颈
------------

性能优化就是找到系统处理中的瓶颈以及除去这些的过程。

性能优化其实是对OS各子系统达到平衡的定义，这些子系统包括： ``CPU`` ``Memory`` ``IO`` ``Network`` .这些子系统之间是相互依赖的，任何一个子系统的高负荷都会
导致其他子系统出现问题。

比如：

1.大量的页调入请求导致内存队列的拥堵

2.网卡的大吞吐量可能导致更多的CPU开销

3.大量的写磁盘请求会导致CPU以及IO的问题



分析内存瓶颈
------------

在linux的内存分配机制中，优先使用物理内存,当物理内存还有空闲时不会释放其占用的内存，就算占用内存的程序已经关闭，该程序所占用的内存可以用来做缓存使用对于开启过的程序
或者是刚存取过的数据会比较快

一般有这样的一个经验公式：应用程序可用内存大于70%时,表示系统内存资源充足,不影响系统性能

虚拟内存时Linux kernel 使用虚拟内存机制来利用磁盘对内存的空间进行扩展,kernel将在那时不用的内存写入到磁盘从而释放出更多的可用内存,当这些数据再次被使用时会被重新加载到内存中
。做虚拟内存的磁盘空间被称作时swap space. 对于硬盘的读写相对于内存来说速度要慢许多因此使用了虚拟内存的程序，速度相应会变慢，虚拟内存的使用往往被认为时内存出现瓶颈的标志。

内存分页(memory paging)和内存交换(memory swapping)

memory paging 是一个定时将内存数据同步回磁盘的过程。当系统内存不足时，系统回将最近不常用的内存段交换到交换空间, 出现pageout. 当程序要读的文件在内存中没有找到，这时候出现
page fault 从磁盘中读取到内存.

pmap 命令可以用来查看进程的内存映射使用这个命令可以找出内存瓶颈的原因。

vmstat 命令可以查看cpu使用率, 内存使用, 虚拟内存交换情况, io读写情况

一般情况下vmstat工具可以通过两个数字参数完成, 第一参数是采样的时间间隔, 第二个参数是采样的次数.

r 在运行队列中等待的进程数

b 在等待io的进程数

swpd 指切换到内存交换去的内存数量(以K为单位)，如果swpd的值不为0,或者比较大,只要si so的值长期为0, 这种情况一般不用担心, 不会影响系统性能,

free 表示空闲的物理内存

buffer  表示buffers cache的内存数量, 一般对块设备的读写才需要缓冲

cache 表示page cache的内存数量, 一般作为文件系统的cached . 频繁访问的文件都会被cached，如果cached的值比较大, 说明cached的文件比较多. 也就是常说的高速缓存

si 从磁盘交换到内存的交换页数量, 单位KB/s 

so 从内存交换到磁盘的交换页数量,单位是KB/s

一般情况下, si so的值都为0, 如果si so的值长期不为0，则表示系统内存不足

在linux中, 分页(paging)和交换(swapping)是有区别的，分页是吧独立的页移动到磁盘上的一个交换分区. 交换是一个大型操作, 把进程所有的地址空间一次性全部移动到交换分区.
交换可能是有两种因素引起的

1. 进程进入睡眠模式,这种事情经常发生,因为进程依赖于交互操作,编辑器,shell等,应用程序把大多数的时间花在等待用户输入数据上,在此期间进程是非激活的

2. 进程异常行为.

分页可能是严重的性能问题

- 性能调优选项

1.  使用bigpages hugetlb和共享内存调优swap空间

2.  增加或者减少页大小

3.  调整page-out 率

4.  增加内存


优化内存子系统需要持续的观察,确保所作出的修改不会对其他的子系统产生不好的影响，如果要修改/proc/sys/vm下的虚拟内存参数, 建议每次只该一个参数, 然后观察性能变化

linux上大多数应用并不直接把数据写入磁盘，他们先写入由虚拟内存管理器维护的文件系统缓冲中,最后刷入数据到磁盘. 

- /proc/sys/vm/swappiness 

这个参数用来定义如何把内存交换到磁盘,通过修改此参数中的百分比,可以控制swap行为,如果不希望发生交换,那应该设很小的值. 可以通过echo 或者 sysctl改变交换行为

::

    sysctl -w vm.swappiness=100

- /proc/sys/vm/dirty_background_ratio 

此参数定义了达到的内存百分比时，pdflush守护进程把数据写入到磁盘,如果希望更大写入则把默认值增加到10% ,值越大写入的频率越低

::

    sysctl -w vm.dirty_background_ratio=25

- /proc/sys/vm/dirty_ratio

此参数设置了应用程序生成的脏页被写入磁盘的百分比


::

    sysctl -w vm.dirty_ratio=20


- swap分区

磁盘上空闲的分区可以创建为swap分区,如果没有空闲分区怎可以创建swap文件, swap分区是优于swap文件的,swap的I/O操作可以绕过文件系统,节省了写入文件的开销,比写入swap文件的性能更好

另一种提升swap分区和文件性能的办法是建立多个swap分区，linux可以并行的读写多个swap分区

swap分区可以在/etc/fstab文件中创建


- HugeTLBfs

对于大量使用虚拟地址空间的应用来说，内存管理是很有用的，CPU的旁路转换缓冲是保存虚拟到物理映射信息的小缓冲区,使用TLB，可以不用参考内存页表的虚拟地址映射就能完成转换. 为了保证转换速度够快
TLB通常被设置的很多,经常有大内存的应用超过TLB的映射能力

HugeTLBfs特性让应用使用比通常更大的页大小,大页可以是正常页的1000倍. 这个功能是通过文件系统接口向应用程序开放的

::

    sysctl -w vm.nr_hugepages=512

如果应用程序使用mmap()系统调用使用大页,则必须挂载hugetlb类型的文件系统

::

    mount -t hugetlbfs none /mnt/hugepages




分析IO瓶颈
----------


分析系统调用
------------


优化程序代码
------------



